{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","id","email","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.71a0321b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, id ,email}) =>{\r\n\treturn(\r\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src = {`https://robohash.org/${id}?100x100`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{name}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) =>{\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\trobots.map((user , i) =>{\r\n\t\t\treturn (<Card \r\n\t\t\t\tkey={i}\r\n\t\t\t\tid={robots[i].id}\r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email} \r\n\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({searchfield ,searchchange}) =>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search robots' \r\n\t\t\tonChange={searchchange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) =>{\r\n\treturn(\r\n\t\t<div style={{ overflowY: 'scroll', border: '1px solid black', height:'500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll; ","import React, { Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch(error , info){\r\n    this.setState({ hasError : true})\r\n}\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>OOOOPS .that is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"./components/CardList\";\r\nimport SearchBox from \"./components/SearchBox\";\r\nimport Scroll from \"./components/Scroll\";\r\nimport ErrorBoundry from \"./components/ErrorBoundry\";\r\nimport \"./App.css\";\r\n\r\nimport { setSearchField ,requestRobots } from \"./actions\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n\tsearchField: state.searchRobots.searchField,\r\n\trobots: state.requestRobots.robots,\r\n\tisPending: state.requestRobots.isPending,\r\n\terror: state.requestRobots.error\r\n\t\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n\tonSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n\tonRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n\r\n  render() {\r\n\tconst {searchField , onSearchChange, robots , isPending} = this.props\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return isPending ? (\r\n      <h1 className=\"tc\">Loading</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n        <SearchBox searchchange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCESS = 'REQUEST_ROBOTS_SUCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\"\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\"\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport \"tachyons\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n    rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}